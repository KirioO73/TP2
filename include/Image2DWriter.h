#ifndef TP2_IMAGE2DWRITTER_H
#define TP2_IMAGE2DWRITTER_H

#include <iostream>
#include <string>
#include "Color.h"
#include "Image2D.h"

template <typename TValue>
class Image2DWriter {
public:
    typedef TValue Value;
    typedef Image2D<Value> Image;
    static bool write( Image & img, std::ostream & output, bool ascii )
    {
        std::cerr << "[Image2DWriter<TValue>::write] NOT IMPLEMENTED." << std::endl;
        return false;
    }
};
/// Specialization for gray-level images.
template <>
class Image2DWriter<unsigned char> {
public:
    typedef unsigned char Value;
    typedef Image2D<Value> Image;
    static bool write( Image & img, std::ostream & output, bool ascii )
    {
        if (!ascii){
            output << "P5" << std::endl;
            output << "# Done by Quentin & Alexander"<< std::endl;
            output << img.h()<<" "<< img.w()<< std::endl;
            output << 255<< std::endl;
            const Image& cimg = img;
            for ( Image::ConstIterator it = cimg.begin(), itE = cimg.end(); it != itE; ++it ){
                output << *it;
                //cout << "exp "<< *it << endl;
            }
            return true;
        }
        else{
            output << "P2" << std::endl;
            output << "# Done by Quentin & Alexander"<< std::endl;
            output << img.h()<<" "<<img.w()<< std::endl;
            output << 255<< std::endl;
            const Image& cimg = img;
            for ( Image::ConstIterator it = cimg.begin(), itE = cimg.end(); it != itE; ++it ){
                output << (int) *it << std::endl;
                //cout << "exp "<< *it << endl;
            }
            return true;
        }
        return true;
    }
};
/// Specialization for color images.
template <>
class Image2DWriter<Color> {
public:
    typedef Color Value;
    typedef Image2D<Value> Image;
    typedef Image::ConstIterator ConstIterator;
    static bool write( Image & img, std::ostream & output, bool ascii )
    {
        output << "P6" << std::endl; // PPM raw
        output << "# Generated by You !" << std::endl;
        output << img.w() << " " << img.h() << std::endl;
        output << "255" << std::endl;
        const Image& cimg = img; // Vue "constante" sur l'image img.
        for ( ConstIterator it = cimg.begin(), itE = cimg.end(); it != itE; ++it ) // (*)
        {
            Color c = *it;
            output << c.red << c.green << c.blue;
        }
        return true;
    }
};

#endif //TP2_IMAGE2DWRITTER_H
